
TubularJackController.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b48  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000028  00800060  00800060  00000bbc  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  00000bbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000c0  00000000  00000000  00001310  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000913  00000000  00000000  000013d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000264  00000000  00000000  00001ce3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000005c3  00000000  00000000  00001f47  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000023c  00000000  00000000  0000250c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000021e  00000000  00000000  00002748  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000560  00000000  00000000  00002966  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2d c0       	rjmp	.+90     	; 0x5e <__vector_1>
   4:	cb c0       	rjmp	.+406    	; 0x19c <__vector_2>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	63 c1       	rjmp	.+710    	; 0x2da <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e8 e4       	ldi	r30, 0x48	; 72
  3a:	fb e0       	ldi	r31, 0x0B	; 11
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a0 36       	cpi	r26, 0x60	; 96
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	a0 e6       	ldi	r26, 0x60	; 96
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a8 38       	cpi	r26, 0x88	; 136
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	70 d5       	rcall	.+2784   	; 0xb3a <main>
  5a:	74 c5       	rjmp	.+2792   	; 0xb44 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <__vector_1>:
extern char RemoteAFlag,RemoteBFlag,FlasherState;
extern unsigned long long Time;
unsigned long long RefreshTime;

ISR(INT0_vect)
{
  5e:	1f 92       	push	r1
  60:	0f 92       	push	r0
  62:	0f b6       	in	r0, 0x3f	; 63
  64:	0f 92       	push	r0
  66:	11 24       	eor	r1, r1
  68:	2f 93       	push	r18
  6a:	3f 93       	push	r19
  6c:	4f 93       	push	r20
  6e:	5f 93       	push	r21
  70:	6f 93       	push	r22
  72:	7f 93       	push	r23
  74:	8f 93       	push	r24
  76:	9f 93       	push	r25
  78:	af 93       	push	r26
  7a:	ef 93       	push	r30
  7c:	ff 93       	push	r31
	if(RemotePulseA==0)
  7e:	80 91 77 00 	lds	r24, 0x0077
  82:	88 23       	and	r24, r24
  84:	09 f0       	breq	.+2      	; 0x88 <__vector_1+0x2a>
  86:	60 c0       	rjmp	.+192    	; 0x148 <__vector_1+0xea>
	{
		RemotePulseA++;
  88:	81 e0       	ldi	r24, 0x01	; 1
  8a:	80 93 77 00 	sts	0x0077, r24
		TCNT1H=0;
  8e:	1d bc       	out	0x2d, r1	; 45
		TCNT1L=0;
  90:	1c bc       	out	0x2c, r1	; 44
		RefreshTime=Time+50;
  92:	50 91 61 00 	lds	r21, 0x0061
  96:	40 91 62 00 	lds	r20, 0x0062
  9a:	30 91 63 00 	lds	r19, 0x0063
  9e:	20 91 64 00 	lds	r18, 0x0064
  a2:	90 91 65 00 	lds	r25, 0x0065
  a6:	f0 91 66 00 	lds	r31, 0x0066
  aa:	e0 91 67 00 	lds	r30, 0x0067
  ae:	a0 91 68 00 	lds	r26, 0x0068
  b2:	75 2f       	mov	r23, r21
  b4:	7e 5c       	subi	r23, 0xCE	; 206
  b6:	61 e0       	ldi	r22, 0x01	; 1
  b8:	75 17       	cp	r23, r21
  ba:	08 f0       	brcs	.+2      	; 0xbe <__vector_1+0x60>
  bc:	60 e0       	ldi	r22, 0x00	; 0
  be:	84 2f       	mov	r24, r20
  c0:	50 e0       	ldi	r21, 0x00	; 0
  c2:	64 0f       	add	r22, r20
  c4:	41 e0       	ldi	r20, 0x01	; 1
  c6:	68 17       	cp	r22, r24
  c8:	08 f0       	brcs	.+2      	; 0xcc <__vector_1+0x6e>
  ca:	40 e0       	ldi	r20, 0x00	; 0
  cc:	54 2b       	or	r21, r20
  ce:	83 2f       	mov	r24, r19
  d0:	40 e0       	ldi	r20, 0x00	; 0
  d2:	53 0f       	add	r21, r19
  d4:	31 e0       	ldi	r19, 0x01	; 1
  d6:	58 17       	cp	r21, r24
  d8:	08 f0       	brcs	.+2      	; 0xdc <__vector_1+0x7e>
  da:	30 e0       	ldi	r19, 0x00	; 0
  dc:	43 2b       	or	r20, r19
  de:	82 2f       	mov	r24, r18
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	42 0f       	add	r20, r18
  e4:	21 e0       	ldi	r18, 0x01	; 1
  e6:	48 17       	cp	r20, r24
  e8:	08 f0       	brcs	.+2      	; 0xec <__vector_1+0x8e>
  ea:	20 e0       	ldi	r18, 0x00	; 0
  ec:	32 2b       	or	r19, r18
  ee:	89 2f       	mov	r24, r25
  f0:	20 e0       	ldi	r18, 0x00	; 0
  f2:	39 0f       	add	r19, r25
  f4:	91 e0       	ldi	r25, 0x01	; 1
  f6:	38 17       	cp	r19, r24
  f8:	08 f0       	brcs	.+2      	; 0xfc <__vector_1+0x9e>
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	29 2b       	or	r18, r25
  fe:	8f 2f       	mov	r24, r31
 100:	90 e0       	ldi	r25, 0x00	; 0
 102:	2f 0f       	add	r18, r31
 104:	f1 e0       	ldi	r31, 0x01	; 1
 106:	28 17       	cp	r18, r24
 108:	08 f0       	brcs	.+2      	; 0x10c <__vector_1+0xae>
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	9f 2b       	or	r25, r31
 10e:	fe 2f       	mov	r31, r30
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	9e 0f       	add	r25, r30
 114:	e1 e0       	ldi	r30, 0x01	; 1
 116:	9f 17       	cp	r25, r31
 118:	08 f0       	brcs	.+2      	; 0x11c <__vector_1+0xbe>
 11a:	e0 e0       	ldi	r30, 0x00	; 0
 11c:	8e 2b       	or	r24, r30
 11e:	8a 0f       	add	r24, r26
 120:	70 93 6f 00 	sts	0x006F, r23
 124:	60 93 70 00 	sts	0x0070, r22
 128:	50 93 71 00 	sts	0x0071, r21
 12c:	40 93 72 00 	sts	0x0072, r20
 130:	30 93 73 00 	sts	0x0073, r19
 134:	20 93 74 00 	sts	0x0074, r18
 138:	90 93 75 00 	sts	0x0075, r25
 13c:	80 93 76 00 	sts	0x0076, r24
	}
	
	if(RemotePulseA>0)
 140:	80 91 77 00 	lds	r24, 0x0077
 144:	88 23       	and	r24, r24
 146:	d1 f0       	breq	.+52     	; 0x17c <__vector_1+0x11e>
	{
		RemotePulseA++;
 148:	8f 5f       	subi	r24, 0xFF	; 255
 14a:	80 93 77 00 	sts	0x0077, r24
		if(RemotePulseA>4)
 14e:	85 30       	cpi	r24, 0x05	; 5
 150:	a8 f0       	brcs	.+42     	; 0x17c <__vector_1+0x11e>
	{RemoteAFlag=1;RemotePulseA=0;RefreshTime=0;}
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 6d 00 	sts	0x006D, r24
 158:	10 92 77 00 	sts	0x0077, r1
 15c:	10 92 6f 00 	sts	0x006F, r1
 160:	10 92 70 00 	sts	0x0070, r1
 164:	10 92 71 00 	sts	0x0071, r1
 168:	10 92 72 00 	sts	0x0072, r1
 16c:	10 92 73 00 	sts	0x0073, r1
 170:	10 92 74 00 	sts	0x0074, r1
 174:	10 92 75 00 	sts	0x0075, r1
 178:	10 92 76 00 	sts	0x0076, r1
	}
}
 17c:	ff 91       	pop	r31
 17e:	ef 91       	pop	r30
 180:	af 91       	pop	r26
 182:	9f 91       	pop	r25
 184:	8f 91       	pop	r24
 186:	7f 91       	pop	r23
 188:	6f 91       	pop	r22
 18a:	5f 91       	pop	r21
 18c:	4f 91       	pop	r20
 18e:	3f 91       	pop	r19
 190:	2f 91       	pop	r18
 192:	0f 90       	pop	r0
 194:	0f be       	out	0x3f, r0	; 63
 196:	0f 90       	pop	r0
 198:	1f 90       	pop	r1
 19a:	18 95       	reti

0000019c <__vector_2>:



ISR(INT1_vect)
{
 19c:	1f 92       	push	r1
 19e:	0f 92       	push	r0
 1a0:	0f b6       	in	r0, 0x3f	; 63
 1a2:	0f 92       	push	r0
 1a4:	11 24       	eor	r1, r1
 1a6:	2f 93       	push	r18
 1a8:	3f 93       	push	r19
 1aa:	4f 93       	push	r20
 1ac:	5f 93       	push	r21
 1ae:	6f 93       	push	r22
 1b0:	7f 93       	push	r23
 1b2:	8f 93       	push	r24
 1b4:	9f 93       	push	r25
 1b6:	af 93       	push	r26
 1b8:	ef 93       	push	r30
 1ba:	ff 93       	push	r31
	if(RemotePulseB==0)
 1bc:	80 91 6e 00 	lds	r24, 0x006E
 1c0:	88 23       	and	r24, r24
 1c2:	09 f0       	breq	.+2      	; 0x1c6 <__vector_2+0x2a>
 1c4:	60 c0       	rjmp	.+192    	; 0x286 <__vector_2+0xea>
	{
		RemotePulseB++;
 1c6:	81 e0       	ldi	r24, 0x01	; 1
 1c8:	80 93 6e 00 	sts	0x006E, r24
		TCNT1H=0;
 1cc:	1d bc       	out	0x2d, r1	; 45
		TCNT1L=0;
 1ce:	1c bc       	out	0x2c, r1	; 44
		RefreshTime=Time+50;
 1d0:	50 91 61 00 	lds	r21, 0x0061
 1d4:	40 91 62 00 	lds	r20, 0x0062
 1d8:	30 91 63 00 	lds	r19, 0x0063
 1dc:	20 91 64 00 	lds	r18, 0x0064
 1e0:	90 91 65 00 	lds	r25, 0x0065
 1e4:	f0 91 66 00 	lds	r31, 0x0066
 1e8:	e0 91 67 00 	lds	r30, 0x0067
 1ec:	a0 91 68 00 	lds	r26, 0x0068
 1f0:	75 2f       	mov	r23, r21
 1f2:	7e 5c       	subi	r23, 0xCE	; 206
 1f4:	61 e0       	ldi	r22, 0x01	; 1
 1f6:	75 17       	cp	r23, r21
 1f8:	08 f0       	brcs	.+2      	; 0x1fc <__vector_2+0x60>
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	84 2f       	mov	r24, r20
 1fe:	50 e0       	ldi	r21, 0x00	; 0
 200:	64 0f       	add	r22, r20
 202:	41 e0       	ldi	r20, 0x01	; 1
 204:	68 17       	cp	r22, r24
 206:	08 f0       	brcs	.+2      	; 0x20a <__vector_2+0x6e>
 208:	40 e0       	ldi	r20, 0x00	; 0
 20a:	54 2b       	or	r21, r20
 20c:	83 2f       	mov	r24, r19
 20e:	40 e0       	ldi	r20, 0x00	; 0
 210:	53 0f       	add	r21, r19
 212:	31 e0       	ldi	r19, 0x01	; 1
 214:	58 17       	cp	r21, r24
 216:	08 f0       	brcs	.+2      	; 0x21a <__vector_2+0x7e>
 218:	30 e0       	ldi	r19, 0x00	; 0
 21a:	43 2b       	or	r20, r19
 21c:	82 2f       	mov	r24, r18
 21e:	30 e0       	ldi	r19, 0x00	; 0
 220:	42 0f       	add	r20, r18
 222:	21 e0       	ldi	r18, 0x01	; 1
 224:	48 17       	cp	r20, r24
 226:	08 f0       	brcs	.+2      	; 0x22a <__vector_2+0x8e>
 228:	20 e0       	ldi	r18, 0x00	; 0
 22a:	32 2b       	or	r19, r18
 22c:	89 2f       	mov	r24, r25
 22e:	20 e0       	ldi	r18, 0x00	; 0
 230:	39 0f       	add	r19, r25
 232:	91 e0       	ldi	r25, 0x01	; 1
 234:	38 17       	cp	r19, r24
 236:	08 f0       	brcs	.+2      	; 0x23a <__vector_2+0x9e>
 238:	90 e0       	ldi	r25, 0x00	; 0
 23a:	29 2b       	or	r18, r25
 23c:	8f 2f       	mov	r24, r31
 23e:	90 e0       	ldi	r25, 0x00	; 0
 240:	2f 0f       	add	r18, r31
 242:	f1 e0       	ldi	r31, 0x01	; 1
 244:	28 17       	cp	r18, r24
 246:	08 f0       	brcs	.+2      	; 0x24a <__vector_2+0xae>
 248:	f0 e0       	ldi	r31, 0x00	; 0
 24a:	9f 2b       	or	r25, r31
 24c:	fe 2f       	mov	r31, r30
 24e:	80 e0       	ldi	r24, 0x00	; 0
 250:	9e 0f       	add	r25, r30
 252:	e1 e0       	ldi	r30, 0x01	; 1
 254:	9f 17       	cp	r25, r31
 256:	08 f0       	brcs	.+2      	; 0x25a <__vector_2+0xbe>
 258:	e0 e0       	ldi	r30, 0x00	; 0
 25a:	8e 2b       	or	r24, r30
 25c:	8a 0f       	add	r24, r26
 25e:	70 93 6f 00 	sts	0x006F, r23
 262:	60 93 70 00 	sts	0x0070, r22
 266:	50 93 71 00 	sts	0x0071, r21
 26a:	40 93 72 00 	sts	0x0072, r20
 26e:	30 93 73 00 	sts	0x0073, r19
 272:	20 93 74 00 	sts	0x0074, r18
 276:	90 93 75 00 	sts	0x0075, r25
 27a:	80 93 76 00 	sts	0x0076, r24
	}
	
	if(RemotePulseB>0)
 27e:	80 91 6e 00 	lds	r24, 0x006E
 282:	88 23       	and	r24, r24
 284:	d1 f0       	breq	.+52     	; 0x2ba <__vector_2+0x11e>
	{
		RemotePulseB++;
 286:	8f 5f       	subi	r24, 0xFF	; 255
 288:	80 93 6e 00 	sts	0x006E, r24
		if(RemotePulseB>4)
 28c:	85 30       	cpi	r24, 0x05	; 5
 28e:	a8 f0       	brcs	.+42     	; 0x2ba <__vector_2+0x11e>
			{RemoteBFlag=1;RemotePulseB=0;RefreshTime=0;}
 290:	81 e0       	ldi	r24, 0x01	; 1
 292:	80 93 6c 00 	sts	0x006C, r24
 296:	10 92 6e 00 	sts	0x006E, r1
 29a:	10 92 6f 00 	sts	0x006F, r1
 29e:	10 92 70 00 	sts	0x0070, r1
 2a2:	10 92 71 00 	sts	0x0071, r1
 2a6:	10 92 72 00 	sts	0x0072, r1
 2aa:	10 92 73 00 	sts	0x0073, r1
 2ae:	10 92 74 00 	sts	0x0074, r1
 2b2:	10 92 75 00 	sts	0x0075, r1
 2b6:	10 92 76 00 	sts	0x0076, r1
	}
}
 2ba:	ff 91       	pop	r31
 2bc:	ef 91       	pop	r30
 2be:	af 91       	pop	r26
 2c0:	9f 91       	pop	r25
 2c2:	8f 91       	pop	r24
 2c4:	7f 91       	pop	r23
 2c6:	6f 91       	pop	r22
 2c8:	5f 91       	pop	r21
 2ca:	4f 91       	pop	r20
 2cc:	3f 91       	pop	r19
 2ce:	2f 91       	pop	r18
 2d0:	0f 90       	pop	r0
 2d2:	0f be       	out	0x3f, r0	; 63
 2d4:	0f 90       	pop	r0
 2d6:	1f 90       	pop	r1
 2d8:	18 95       	reti

000002da <__vector_9>:



ISR(TIMER0_OVF_vect)
{
 2da:	1f 92       	push	r1
 2dc:	0f 92       	push	r0
 2de:	0f b6       	in	r0, 0x3f	; 63
 2e0:	0f 92       	push	r0
 2e2:	11 24       	eor	r1, r1
 2e4:	0f 93       	push	r16
 2e6:	1f 93       	push	r17
 2e8:	2f 93       	push	r18
 2ea:	3f 93       	push	r19
 2ec:	4f 93       	push	r20
 2ee:	5f 93       	push	r21
 2f0:	6f 93       	push	r22
 2f2:	7f 93       	push	r23
 2f4:	8f 93       	push	r24
 2f6:	9f 93       	push	r25
 2f8:	af 93       	push	r26
 2fa:	bf 93       	push	r27
 2fc:	cf 93       	push	r28
 2fe:	df 93       	push	r29
 300:	ef 93       	push	r30
 302:	ff 93       	push	r31
	Time++;
 304:	40 91 61 00 	lds	r20, 0x0061
 308:	30 91 62 00 	lds	r19, 0x0062
 30c:	20 91 63 00 	lds	r18, 0x0063
 310:	90 91 64 00 	lds	r25, 0x0064
 314:	80 91 65 00 	lds	r24, 0x0065
 318:	f0 91 66 00 	lds	r31, 0x0066
 31c:	e0 91 67 00 	lds	r30, 0x0067
 320:	a0 91 68 00 	lds	r26, 0x0068
 324:	64 2f       	mov	r22, r20
 326:	6f 5f       	subi	r22, 0xFF	; 255
 328:	51 e0       	ldi	r21, 0x01	; 1
 32a:	64 17       	cp	r22, r20
 32c:	08 f0       	brcs	.+2      	; 0x330 <__vector_9+0x56>
 32e:	50 e0       	ldi	r21, 0x00	; 0
 330:	73 2f       	mov	r23, r19
 332:	40 e0       	ldi	r20, 0x00	; 0
 334:	53 0f       	add	r21, r19
 336:	31 e0       	ldi	r19, 0x01	; 1
 338:	57 17       	cp	r21, r23
 33a:	08 f0       	brcs	.+2      	; 0x33e <__vector_9+0x64>
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	43 2b       	or	r20, r19
 340:	72 2f       	mov	r23, r18
 342:	30 e0       	ldi	r19, 0x00	; 0
 344:	42 0f       	add	r20, r18
 346:	21 e0       	ldi	r18, 0x01	; 1
 348:	47 17       	cp	r20, r23
 34a:	08 f0       	brcs	.+2      	; 0x34e <__vector_9+0x74>
 34c:	20 e0       	ldi	r18, 0x00	; 0
 34e:	32 2b       	or	r19, r18
 350:	79 2f       	mov	r23, r25
 352:	20 e0       	ldi	r18, 0x00	; 0
 354:	39 0f       	add	r19, r25
 356:	91 e0       	ldi	r25, 0x01	; 1
 358:	37 17       	cp	r19, r23
 35a:	08 f0       	brcs	.+2      	; 0x35e <__vector_9+0x84>
 35c:	90 e0       	ldi	r25, 0x00	; 0
 35e:	29 2b       	or	r18, r25
 360:	78 2f       	mov	r23, r24
 362:	90 e0       	ldi	r25, 0x00	; 0
 364:	28 0f       	add	r18, r24
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	27 17       	cp	r18, r23
 36a:	08 f0       	brcs	.+2      	; 0x36e <__vector_9+0x94>
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	98 2b       	or	r25, r24
 370:	7f 2f       	mov	r23, r31
 372:	80 e0       	ldi	r24, 0x00	; 0
 374:	9f 0f       	add	r25, r31
 376:	f1 e0       	ldi	r31, 0x01	; 1
 378:	97 17       	cp	r25, r23
 37a:	08 f0       	brcs	.+2      	; 0x37e <__vector_9+0xa4>
 37c:	f0 e0       	ldi	r31, 0x00	; 0
 37e:	8f 2b       	or	r24, r31
 380:	fe 2f       	mov	r31, r30
 382:	70 e0       	ldi	r23, 0x00	; 0
 384:	8e 0f       	add	r24, r30
 386:	e1 e0       	ldi	r30, 0x01	; 1
 388:	8f 17       	cp	r24, r31
 38a:	08 f0       	brcs	.+2      	; 0x38e <__vector_9+0xb4>
 38c:	e0 e0       	ldi	r30, 0x00	; 0
 38e:	7e 2b       	or	r23, r30
 390:	7a 0f       	add	r23, r26
 392:	06 2f       	mov	r16, r22
 394:	d5 2f       	mov	r29, r21
 396:	14 2f       	mov	r17, r20
 398:	c3 2f       	mov	r28, r19
 39a:	b2 2f       	mov	r27, r18
 39c:	a9 2f       	mov	r26, r25
 39e:	f8 2f       	mov	r31, r24
 3a0:	e7 2f       	mov	r30, r23
 3a2:	60 93 61 00 	sts	0x0061, r22
 3a6:	50 93 62 00 	sts	0x0062, r21
 3aa:	40 93 63 00 	sts	0x0063, r20
 3ae:	30 93 64 00 	sts	0x0064, r19
 3b2:	20 93 65 00 	sts	0x0065, r18
 3b6:	90 93 66 00 	sts	0x0066, r25
 3ba:	80 93 67 00 	sts	0x0067, r24
 3be:	70 93 68 00 	sts	0x0068, r23
	FlasherCounter++;
 3c2:	80 91 60 00 	lds	r24, 0x0060
 3c6:	8f 5f       	subi	r24, 0xFF	; 255
 3c8:	80 93 60 00 	sts	0x0060, r24
	if(FlasherCounter>=FlasherDelay)
 3cc:	86 32       	cpi	r24, 0x26	; 38
 3ce:	48 f0       	brcs	.+18     	; 0x3e2 <__vector_9+0x108>
	{
		FlasherCounter=0;
 3d0:	10 92 60 00 	sts	0x0060, r1
		FlasherState=!FlasherState;	  
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	90 91 69 00 	lds	r25, 0x0069
 3da:	91 11       	cpse	r25, r1
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	80 93 69 00 	sts	0x0069, r24
	}
	if((Time>=RefreshTime)&&(RefreshTime))
 3e2:	70 91 6f 00 	lds	r23, 0x006F
 3e6:	80 91 70 00 	lds	r24, 0x0070
 3ea:	60 91 71 00 	lds	r22, 0x0071
 3ee:	50 91 72 00 	lds	r21, 0x0072
 3f2:	40 91 73 00 	lds	r20, 0x0073
 3f6:	30 91 74 00 	lds	r19, 0x0074
 3fa:	20 91 75 00 	lds	r18, 0x0075
 3fe:	90 91 76 00 	lds	r25, 0x0076
 402:	e9 17       	cp	r30, r25
 404:	c0 f1       	brcs	.+112    	; 0x476 <__stack+0x17>
 406:	9e 17       	cp	r25, r30
 408:	d1 f4       	brne	.+52     	; 0x43e <__vector_9+0x164>
 40a:	f2 17       	cp	r31, r18
 40c:	a0 f1       	brcs	.+104    	; 0x476 <__stack+0x17>
 40e:	2f 17       	cp	r18, r31
 410:	b1 f4       	brne	.+44     	; 0x43e <__vector_9+0x164>
 412:	a3 17       	cp	r26, r19
 414:	80 f1       	brcs	.+96     	; 0x476 <__stack+0x17>
 416:	3a 17       	cp	r19, r26
 418:	91 f4       	brne	.+36     	; 0x43e <__vector_9+0x164>
 41a:	b4 17       	cp	r27, r20
 41c:	60 f1       	brcs	.+88     	; 0x476 <__stack+0x17>
 41e:	4b 17       	cp	r20, r27
 420:	71 f4       	brne	.+28     	; 0x43e <__vector_9+0x164>
 422:	c5 17       	cp	r28, r21
 424:	40 f1       	brcs	.+80     	; 0x476 <__stack+0x17>
 426:	5c 17       	cp	r21, r28
 428:	51 f4       	brne	.+20     	; 0x43e <__vector_9+0x164>
 42a:	16 17       	cp	r17, r22
 42c:	20 f1       	brcs	.+72     	; 0x476 <__stack+0x17>
 42e:	61 17       	cp	r22, r17
 430:	31 f4       	brne	.+12     	; 0x43e <__vector_9+0x164>
 432:	d8 17       	cp	r29, r24
 434:	00 f1       	brcs	.+64     	; 0x476 <__stack+0x17>
 436:	8d 17       	cp	r24, r29
 438:	11 f4       	brne	.+4      	; 0x43e <__vector_9+0x164>
 43a:	07 17       	cp	r16, r23
 43c:	e0 f0       	brcs	.+56     	; 0x476 <__stack+0x17>
 43e:	87 2b       	or	r24, r23
 440:	86 2b       	or	r24, r22
 442:	85 2b       	or	r24, r21
 444:	84 2b       	or	r24, r20
 446:	83 2b       	or	r24, r19
 448:	82 2b       	or	r24, r18
 44a:	89 2b       	or	r24, r25
 44c:	a1 f0       	breq	.+40     	; 0x476 <__stack+0x17>
	  {RemotePulseA=0;RemotePulseB=0;RefreshTime=0;}
 44e:	10 92 77 00 	sts	0x0077, r1
 452:	10 92 6e 00 	sts	0x006E, r1
 456:	10 92 6f 00 	sts	0x006F, r1
 45a:	10 92 70 00 	sts	0x0070, r1
 45e:	10 92 71 00 	sts	0x0071, r1
 462:	10 92 72 00 	sts	0x0072, r1
 466:	10 92 73 00 	sts	0x0073, r1
 46a:	10 92 74 00 	sts	0x0074, r1
 46e:	10 92 75 00 	sts	0x0075, r1
 472:	10 92 76 00 	sts	0x0076, r1
 476:	ff 91       	pop	r31
 478:	ef 91       	pop	r30
 47a:	df 91       	pop	r29
 47c:	cf 91       	pop	r28
 47e:	bf 91       	pop	r27
 480:	af 91       	pop	r26
 482:	9f 91       	pop	r25
 484:	8f 91       	pop	r24
 486:	7f 91       	pop	r23
 488:	6f 91       	pop	r22
 48a:	5f 91       	pop	r21
 48c:	4f 91       	pop	r20
 48e:	3f 91       	pop	r19
 490:	2f 91       	pop	r18
 492:	1f 91       	pop	r17
 494:	0f 91       	pop	r16
 496:	0f 90       	pop	r0
 498:	0f be       	out	0x3f, r0	; 63
 49a:	0f 90       	pop	r0
 49c:	1f 90       	pop	r1
 49e:	18 95       	reti

000004a0 <Startup>:
#include <avr/interrupt.h>


void Startup(void)
{
	DDRB=0b00000011;
 4a0:	83 e0       	ldi	r24, 0x03	; 3
 4a2:	87 bb       	out	0x17, r24	; 23
	PORTC=0b001110;
 4a4:	8e e0       	ldi	r24, 0x0E	; 14
 4a6:	85 bb       	out	0x15, r24	; 21
	DDRC=0b000000;
 4a8:	14 ba       	out	0x14, r1	; 20
	DDRD=0b10010000;
 4aa:	80 e9       	ldi	r24, 0x90	; 144
 4ac:	81 bb       	out	0x11, r24	; 17
	
	//----TMR0
	// 10Mhz/(256*1024)=38.14Hz     =     26.2ms
	TCCR0|=0b101;
 4ae:	83 b7       	in	r24, 0x33	; 51
 4b0:	85 60       	ori	r24, 0x05	; 5
 4b2:	83 bf       	out	0x33, r24	; 51
	TIMSK|=0b1;
 4b4:	89 b7       	in	r24, 0x39	; 57
 4b6:	81 60       	ori	r24, 0x01	; 1
 4b8:	89 bf       	out	0x39, r24	; 57
	
	//INT0 & INT1
	MCUCR|=0b1111;
 4ba:	85 b7       	in	r24, 0x35	; 53
 4bc:	8f 60       	ori	r24, 0x0F	; 15
 4be:	85 bf       	out	0x35, r24	; 53
	GICR|=0b11000000;
 4c0:	8b b7       	in	r24, 0x3b	; 59
 4c2:	80 6c       	ori	r24, 0xC0	; 192
 4c4:	8b bf       	out	0x3b, r24	; 59
	
	//Global interrupt enable
	sei();
 4c6:	78 94       	sei
	
	
 4c8:	08 95       	ret

000004ca <StopMotor>:



void StopMotor(void)
{
	Relay1Reset;Relay2Reset;
 4ca:	c1 98       	cbi	0x18, 1	; 24
 4cc:	c0 98       	cbi	0x18, 0	; 24
	FlasherFlag=0;	
 4ce:	10 92 6a 00 	sts	0x006A, r1
}
 4d2:	08 95       	ret

000004d4 <StartMotor>:



void StartMotor(char dir)
{
	FlasherFlag=1;
 4d4:	91 e0       	ldi	r25, 0x01	; 1
 4d6:	90 93 6a 00 	sts	0x006A, r25
	if(dir==Open)
 4da:	81 30       	cpi	r24, 0x01	; 1
 4dc:	19 f4       	brne	.+6      	; 0x4e4 <StartMotor+0x10>
	{
		Relay2Reset;Relay1Set;
 4de:	c0 98       	cbi	0x18, 0	; 24
 4e0:	c1 9a       	sbi	0x18, 1	; 24
 4e2:	08 95       	ret
	}
	
	if(dir==Close)
 4e4:	88 23       	and	r24, r24
 4e6:	11 f4       	brne	.+4      	; 0x4ec <StartMotor+0x18>
	{
		Relay1Reset;Relay2Set;
 4e8:	c1 98       	cbi	0x18, 1	; 24
 4ea:	c0 9a       	sbi	0x18, 0	; 24
 4ec:	08 95       	ret

000004ee <State0>:



void State0(void) // closed
{
	if((RemoteAFlag)||(!OpenKey))
 4ee:	80 91 6d 00 	lds	r24, 0x006D
 4f2:	88 23       	and	r24, r24
 4f4:	11 f4       	brne	.+4      	; 0x4fa <State0+0xc>
 4f6:	99 99       	sbic	0x13, 1	; 19
 4f8:	31 c0       	rjmp	.+98     	; 0x55c <State0+0x6e>
	{
		RemoteAFlag=0;
 4fa:	10 92 6d 00 	sts	0x006D, r1
		LEDSet;
 4fe:	94 98       	cbi	0x12, 4	; 18
		MotorStartTime=Time;
 500:	80 91 61 00 	lds	r24, 0x0061
 504:	80 93 80 00 	sts	0x0080, r24
 508:	80 91 62 00 	lds	r24, 0x0062
 50c:	80 93 81 00 	sts	0x0081, r24
 510:	80 91 63 00 	lds	r24, 0x0063
 514:	80 93 82 00 	sts	0x0082, r24
 518:	80 91 64 00 	lds	r24, 0x0064
 51c:	80 93 83 00 	sts	0x0083, r24
 520:	80 91 65 00 	lds	r24, 0x0065
 524:	80 93 84 00 	sts	0x0084, r24
 528:	80 91 66 00 	lds	r24, 0x0066
 52c:	80 93 85 00 	sts	0x0085, r24
 530:	80 91 67 00 	lds	r24, 0x0067
 534:	80 93 86 00 	sts	0x0086, r24
 538:	80 91 68 00 	lds	r24, 0x0068
 53c:	80 93 87 00 	sts	0x0087, r24
		StartMotor(Open);
 540:	81 e0       	ldi	r24, 0x01	; 1
 542:	c8 df       	rcall	.-112    	; 0x4d4 <StartMotor>
		State=1;
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	80 93 6b 00 	sts	0x006B, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54a:	8f e3       	ldi	r24, 0x3F	; 63
 54c:	92 e4       	ldi	r25, 0x42	; 66
 54e:	af e0       	ldi	r26, 0x0F	; 15
 550:	81 50       	subi	r24, 0x01	; 1
 552:	90 40       	sbci	r25, 0x00	; 0
 554:	a0 40       	sbci	r26, 0x00	; 0
 556:	e1 f7       	brne	.-8      	; 0x550 <State0+0x62>
 558:	00 c0       	rjmp	.+0      	; 0x55a <State0+0x6c>
 55a:	00 00       	nop
 55c:	08 95       	ret

0000055e <State1>:




void State1(void) //openning
{
 55e:	cf 92       	push	r12
 560:	df 92       	push	r13
 562:	ef 92       	push	r14
 564:	ff 92       	push	r15
 566:	0f 93       	push	r16
 568:	1f 93       	push	r17
 56a:	cf 93       	push	r28
 56c:	df 93       	push	r29
	if((RemoteAFlag)||(!StopKey)||(!CloseKey))
 56e:	80 91 6d 00 	lds	r24, 0x006D
 572:	88 23       	and	r24, r24
 574:	21 f4       	brne	.+8      	; 0x57e <State1+0x20>
 576:	9a 9b       	sbis	0x13, 2	; 19
 578:	02 c0       	rjmp	.+4      	; 0x57e <State1+0x20>
 57a:	9b 99       	sbic	0x13, 3	; 19
 57c:	2f c0       	rjmp	.+94     	; 0x5dc <State1+0x7e>
	{
		RemoteAFlag=0;
 57e:	10 92 6d 00 	sts	0x006D, r1
		MotorStopTime=Time;
 582:	80 91 61 00 	lds	r24, 0x0061
 586:	80 93 78 00 	sts	0x0078, r24
 58a:	80 91 62 00 	lds	r24, 0x0062
 58e:	80 93 79 00 	sts	0x0079, r24
 592:	80 91 63 00 	lds	r24, 0x0063
 596:	80 93 7a 00 	sts	0x007A, r24
 59a:	80 91 64 00 	lds	r24, 0x0064
 59e:	80 93 7b 00 	sts	0x007B, r24
 5a2:	80 91 65 00 	lds	r24, 0x0065
 5a6:	80 93 7c 00 	sts	0x007C, r24
 5aa:	80 91 66 00 	lds	r24, 0x0066
 5ae:	80 93 7d 00 	sts	0x007D, r24
 5b2:	80 91 67 00 	lds	r24, 0x0067
 5b6:	80 93 7e 00 	sts	0x007E, r24
 5ba:	80 91 68 00 	lds	r24, 0x0068
 5be:	80 93 7f 00 	sts	0x007F, r24
		StopMotor();
 5c2:	83 df       	rcall	.-250    	; 0x4ca <StopMotor>
		State=2;
 5c4:	82 e0       	ldi	r24, 0x02	; 2
 5c6:	80 93 6b 00 	sts	0x006B, r24
 5ca:	8f e3       	ldi	r24, 0x3F	; 63
 5cc:	92 e4       	ldi	r25, 0x42	; 66
 5ce:	af e0       	ldi	r26, 0x0F	; 15
 5d0:	81 50       	subi	r24, 0x01	; 1
 5d2:	90 40       	sbci	r25, 0x00	; 0
 5d4:	a0 40       	sbci	r26, 0x00	; 0
 5d6:	e1 f7       	brne	.-8      	; 0x5d0 <State1+0x72>
 5d8:	00 c0       	rjmp	.+0      	; 0x5da <State1+0x7c>
 5da:	00 00       	nop
		_delay_ms(500);
	}
	
	if(Time>(MotorStartTime+ActionTime))
 5dc:	c0 90 61 00 	lds	r12, 0x0061
 5e0:	d0 90 62 00 	lds	r13, 0x0062
 5e4:	e0 90 63 00 	lds	r14, 0x0063
 5e8:	f0 90 64 00 	lds	r15, 0x0064
 5ec:	00 91 65 00 	lds	r16, 0x0065
 5f0:	10 91 66 00 	lds	r17, 0x0066
 5f4:	d0 91 67 00 	lds	r29, 0x0067
 5f8:	a0 91 68 00 	lds	r26, 0x0068
 5fc:	80 91 80 00 	lds	r24, 0x0080
 600:	60 91 81 00 	lds	r22, 0x0081
 604:	40 91 82 00 	lds	r20, 0x0082
 608:	30 91 83 00 	lds	r19, 0x0083
 60c:	20 91 84 00 	lds	r18, 0x0084
 610:	f0 91 85 00 	lds	r31, 0x0085
 614:	e0 91 86 00 	lds	r30, 0x0086
 618:	c0 91 87 00 	lds	r28, 0x0087
 61c:	b8 2f       	mov	r27, r24
 61e:	bc 58       	subi	r27, 0x8C	; 140
 620:	51 e0       	ldi	r21, 0x01	; 1
 622:	b8 17       	cp	r27, r24
 624:	08 f0       	brcs	.+2      	; 0x628 <State1+0xca>
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	86 2f       	mov	r24, r22
 62a:	8c 5f       	subi	r24, 0xFC	; 252
 62c:	91 e0       	ldi	r25, 0x01	; 1
 62e:	86 17       	cp	r24, r22
 630:	08 f0       	brcs	.+2      	; 0x634 <State1+0xd6>
 632:	90 e0       	ldi	r25, 0x00	; 0
 634:	58 0f       	add	r21, r24
 636:	61 e0       	ldi	r22, 0x01	; 1
 638:	58 17       	cp	r21, r24
 63a:	08 f0       	brcs	.+2      	; 0x63e <State1+0xe0>
 63c:	60 e0       	ldi	r22, 0x00	; 0
 63e:	96 2b       	or	r25, r22
 640:	85 2f       	mov	r24, r21
 642:	74 2f       	mov	r23, r20
 644:	50 e0       	ldi	r21, 0x00	; 0
 646:	94 0f       	add	r25, r20
 648:	41 e0       	ldi	r20, 0x01	; 1
 64a:	97 17       	cp	r25, r23
 64c:	08 f0       	brcs	.+2      	; 0x650 <State1+0xf2>
 64e:	40 e0       	ldi	r20, 0x00	; 0
 650:	54 2b       	or	r21, r20
 652:	79 2f       	mov	r23, r25
 654:	40 e0       	ldi	r20, 0x00	; 0
 656:	53 0f       	add	r21, r19
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	53 17       	cp	r21, r19
 65c:	08 f0       	brcs	.+2      	; 0x660 <State1+0x102>
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	49 2b       	or	r20, r25
 662:	65 2f       	mov	r22, r21
 664:	30 e0       	ldi	r19, 0x00	; 0
 666:	42 0f       	add	r20, r18
 668:	91 e0       	ldi	r25, 0x01	; 1
 66a:	42 17       	cp	r20, r18
 66c:	08 f0       	brcs	.+2      	; 0x670 <State1+0x112>
 66e:	90 e0       	ldi	r25, 0x00	; 0
 670:	39 2b       	or	r19, r25
 672:	54 2f       	mov	r21, r20
 674:	20 e0       	ldi	r18, 0x00	; 0
 676:	3f 0f       	add	r19, r31
 678:	91 e0       	ldi	r25, 0x01	; 1
 67a:	3f 17       	cp	r19, r31
 67c:	08 f0       	brcs	.+2      	; 0x680 <State1+0x122>
 67e:	90 e0       	ldi	r25, 0x00	; 0
 680:	29 2b       	or	r18, r25
 682:	43 2f       	mov	r20, r19
 684:	3e 2f       	mov	r19, r30
 686:	90 e0       	ldi	r25, 0x00	; 0
 688:	2e 0f       	add	r18, r30
 68a:	e1 e0       	ldi	r30, 0x01	; 1
 68c:	23 17       	cp	r18, r19
 68e:	08 f0       	brcs	.+2      	; 0x692 <State1+0x134>
 690:	e0 e0       	ldi	r30, 0x00	; 0
 692:	9e 2b       	or	r25, r30
 694:	9c 0f       	add	r25, r28
 696:	9a 17       	cp	r25, r26
 698:	e0 f0       	brcs	.+56     	; 0x6d2 <State1+0x174>
 69a:	a9 17       	cp	r26, r25
 69c:	71 f5       	brne	.+92     	; 0x6fa <State1+0x19c>
 69e:	2d 17       	cp	r18, r29
 6a0:	c0 f0       	brcs	.+48     	; 0x6d2 <State1+0x174>
 6a2:	d2 17       	cp	r29, r18
 6a4:	51 f5       	brne	.+84     	; 0x6fa <State1+0x19c>
 6a6:	41 17       	cp	r20, r17
 6a8:	a0 f0       	brcs	.+40     	; 0x6d2 <State1+0x174>
 6aa:	14 17       	cp	r17, r20
 6ac:	31 f5       	brne	.+76     	; 0x6fa <State1+0x19c>
 6ae:	50 17       	cp	r21, r16
 6b0:	80 f0       	brcs	.+32     	; 0x6d2 <State1+0x174>
 6b2:	05 17       	cp	r16, r21
 6b4:	11 f5       	brne	.+68     	; 0x6fa <State1+0x19c>
 6b6:	6f 15       	cp	r22, r15
 6b8:	60 f0       	brcs	.+24     	; 0x6d2 <State1+0x174>
 6ba:	f6 16       	cp	r15, r22
 6bc:	f1 f4       	brne	.+60     	; 0x6fa <State1+0x19c>
 6be:	7e 15       	cp	r23, r14
 6c0:	40 f0       	brcs	.+16     	; 0x6d2 <State1+0x174>
 6c2:	e7 16       	cp	r14, r23
 6c4:	d1 f4       	brne	.+52     	; 0x6fa <State1+0x19c>
 6c6:	8d 15       	cp	r24, r13
 6c8:	20 f0       	brcs	.+8      	; 0x6d2 <State1+0x174>
 6ca:	d8 16       	cp	r13, r24
 6cc:	b1 f4       	brne	.+44     	; 0x6fa <State1+0x19c>
 6ce:	bc 15       	cp	r27, r12
 6d0:	a0 f4       	brcc	.+40     	; 0x6fa <State1+0x19c>
	{
		MotorStopTime=Time;
 6d2:	c0 92 78 00 	sts	0x0078, r12
 6d6:	d0 92 79 00 	sts	0x0079, r13
 6da:	e0 92 7a 00 	sts	0x007A, r14
 6de:	f0 92 7b 00 	sts	0x007B, r15
 6e2:	00 93 7c 00 	sts	0x007C, r16
 6e6:	10 93 7d 00 	sts	0x007D, r17
 6ea:	d0 93 7e 00 	sts	0x007E, r29
 6ee:	a0 93 7f 00 	sts	0x007F, r26
		StopMotor();
 6f2:	eb de       	rcall	.-554    	; 0x4ca <StopMotor>
		State=2;
 6f4:	82 e0       	ldi	r24, 0x02	; 2
 6f6:	80 93 6b 00 	sts	0x006B, r24
	}
	
	
}
 6fa:	df 91       	pop	r29
 6fc:	cf 91       	pop	r28
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	ff 90       	pop	r15
 704:	ef 90       	pop	r14
 706:	df 90       	pop	r13
 708:	cf 90       	pop	r12
 70a:	08 95       	ret

0000070c <State2>:




void State2(void) //open
{
 70c:	df 92       	push	r13
 70e:	ef 92       	push	r14
 710:	ff 92       	push	r15
 712:	0f 93       	push	r16
 714:	1f 93       	push	r17
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
	if((RemoteAFlag)||(!CloseKey))
 71a:	80 91 6d 00 	lds	r24, 0x006D
 71e:	88 23       	and	r24, r24
 720:	11 f4       	brne	.+4      	; 0x726 <State2+0x1a>
 722:	9b 99       	sbic	0x13, 3	; 19
 724:	30 c0       	rjmp	.+96     	; 0x786 <State2+0x7a>
	{
		RemoteAFlag=0;
 726:	10 92 6d 00 	sts	0x006D, r1
		MotorStartTime=Time;
 72a:	80 91 61 00 	lds	r24, 0x0061
 72e:	80 93 80 00 	sts	0x0080, r24
 732:	80 91 62 00 	lds	r24, 0x0062
 736:	80 93 81 00 	sts	0x0081, r24
 73a:	80 91 63 00 	lds	r24, 0x0063
 73e:	80 93 82 00 	sts	0x0082, r24
 742:	80 91 64 00 	lds	r24, 0x0064
 746:	80 93 83 00 	sts	0x0083, r24
 74a:	80 91 65 00 	lds	r24, 0x0065
 74e:	80 93 84 00 	sts	0x0084, r24
 752:	80 91 66 00 	lds	r24, 0x0066
 756:	80 93 85 00 	sts	0x0085, r24
 75a:	80 91 67 00 	lds	r24, 0x0067
 75e:	80 93 86 00 	sts	0x0086, r24
 762:	80 91 68 00 	lds	r24, 0x0068
 766:	80 93 87 00 	sts	0x0087, r24
		StartMotor(Close);
 76a:	80 e0       	ldi	r24, 0x00	; 0
 76c:	b3 de       	rcall	.-666    	; 0x4d4 <StartMotor>
		State=3;
 76e:	83 e0       	ldi	r24, 0x03	; 3
 770:	80 93 6b 00 	sts	0x006B, r24
 774:	8f e3       	ldi	r24, 0x3F	; 63
 776:	92 e4       	ldi	r25, 0x42	; 66
 778:	af e0       	ldi	r26, 0x0F	; 15
 77a:	81 50       	subi	r24, 0x01	; 1
 77c:	90 40       	sbci	r25, 0x00	; 0
 77e:	a0 40       	sbci	r26, 0x00	; 0
 780:	e1 f7       	brne	.-8      	; 0x77a <State2+0x6e>
 782:	00 c0       	rjmp	.+0      	; 0x784 <State2+0x78>
 784:	00 00       	nop
		_delay_ms(500);
	}
	
	if((MotorStopTime!=0)&&(Key2))
 786:	70 91 78 00 	lds	r23, 0x0078
 78a:	60 91 79 00 	lds	r22, 0x0079
 78e:	50 91 7a 00 	lds	r21, 0x007A
 792:	40 91 7b 00 	lds	r20, 0x007B
 796:	30 91 7c 00 	lds	r19, 0x007C
 79a:	20 91 7d 00 	lds	r18, 0x007D
 79e:	90 91 7e 00 	lds	r25, 0x007E
 7a2:	e0 91 7f 00 	lds	r30, 0x007F
 7a6:	87 2f       	mov	r24, r23
 7a8:	86 2b       	or	r24, r22
 7aa:	85 2b       	or	r24, r21
 7ac:	84 2b       	or	r24, r20
 7ae:	83 2b       	or	r24, r19
 7b0:	82 2b       	or	r24, r18
 7b2:	89 2b       	or	r24, r25
 7b4:	8e 2b       	or	r24, r30
 7b6:	09 f4       	brne	.+2      	; 0x7ba <State2+0xae>
 7b8:	8f c0       	rjmp	.+286    	; 0x8d8 <State2+0x1cc>
 7ba:	85 9b       	sbis	0x10, 5	; 16
 7bc:	8d c0       	rjmp	.+282    	; 0x8d8 <State2+0x1cc>
	{
		if(Time>(MotorStopTime+AutocloseDelay))
 7be:	d0 90 61 00 	lds	r13, 0x0061
 7c2:	e0 90 62 00 	lds	r14, 0x0062
 7c6:	f0 90 63 00 	lds	r15, 0x0063
 7ca:	00 91 64 00 	lds	r16, 0x0064
 7ce:	10 91 65 00 	lds	r17, 0x0065
 7d2:	d0 91 66 00 	lds	r29, 0x0066
 7d6:	c0 91 67 00 	lds	r28, 0x0067
 7da:	a0 91 68 00 	lds	r26, 0x0068
 7de:	b7 2f       	mov	r27, r23
 7e0:	b8 51       	subi	r27, 0x18	; 24
 7e2:	f1 e0       	ldi	r31, 0x01	; 1
 7e4:	b7 17       	cp	r27, r23
 7e6:	08 f0       	brcs	.+2      	; 0x7ea <State2+0xde>
 7e8:	f0 e0       	ldi	r31, 0x00	; 0
 7ea:	86 2f       	mov	r24, r22
 7ec:	88 5f       	subi	r24, 0xF8	; 248
 7ee:	71 e0       	ldi	r23, 0x01	; 1
 7f0:	86 17       	cp	r24, r22
 7f2:	08 f0       	brcs	.+2      	; 0x7f6 <State2+0xea>
 7f4:	70 e0       	ldi	r23, 0x00	; 0
 7f6:	6f 2f       	mov	r22, r31
 7f8:	68 0f       	add	r22, r24
 7fa:	f1 e0       	ldi	r31, 0x01	; 1
 7fc:	68 17       	cp	r22, r24
 7fe:	08 f0       	brcs	.+2      	; 0x802 <State2+0xf6>
 800:	f0 e0       	ldi	r31, 0x00	; 0
 802:	7f 2b       	or	r23, r31
 804:	86 2f       	mov	r24, r22
 806:	f5 2f       	mov	r31, r21
 808:	60 e0       	ldi	r22, 0x00	; 0
 80a:	57 0f       	add	r21, r23
 80c:	71 e0       	ldi	r23, 0x01	; 1
 80e:	5f 17       	cp	r21, r31
 810:	08 f0       	brcs	.+2      	; 0x814 <State2+0x108>
 812:	70 e0       	ldi	r23, 0x00	; 0
 814:	67 2b       	or	r22, r23
 816:	f5 2f       	mov	r31, r21
 818:	74 2f       	mov	r23, r20
 81a:	50 e0       	ldi	r21, 0x00	; 0
 81c:	46 0f       	add	r20, r22
 81e:	61 e0       	ldi	r22, 0x01	; 1
 820:	47 17       	cp	r20, r23
 822:	08 f0       	brcs	.+2      	; 0x826 <State2+0x11a>
 824:	60 e0       	ldi	r22, 0x00	; 0
 826:	56 2b       	or	r21, r22
 828:	74 2f       	mov	r23, r20
 82a:	63 2f       	mov	r22, r19
 82c:	40 e0       	ldi	r20, 0x00	; 0
 82e:	35 0f       	add	r19, r21
 830:	51 e0       	ldi	r21, 0x01	; 1
 832:	36 17       	cp	r19, r22
 834:	08 f0       	brcs	.+2      	; 0x838 <State2+0x12c>
 836:	50 e0       	ldi	r21, 0x00	; 0
 838:	45 2b       	or	r20, r21
 83a:	63 2f       	mov	r22, r19
 83c:	52 2f       	mov	r21, r18
 83e:	30 e0       	ldi	r19, 0x00	; 0
 840:	24 0f       	add	r18, r20
 842:	41 e0       	ldi	r20, 0x01	; 1
 844:	25 17       	cp	r18, r21
 846:	08 f0       	brcs	.+2      	; 0x84a <State2+0x13e>
 848:	40 e0       	ldi	r20, 0x00	; 0
 84a:	34 2b       	or	r19, r20
 84c:	52 2f       	mov	r21, r18
 84e:	49 2f       	mov	r20, r25
 850:	20 e0       	ldi	r18, 0x00	; 0
 852:	93 0f       	add	r25, r19
 854:	31 e0       	ldi	r19, 0x01	; 1
 856:	94 17       	cp	r25, r20
 858:	08 f0       	brcs	.+2      	; 0x85c <State2+0x150>
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	23 2b       	or	r18, r19
 85e:	e2 0f       	add	r30, r18
 860:	ea 17       	cp	r30, r26
 862:	e0 f0       	brcs	.+56     	; 0x89c <State2+0x190>
 864:	ae 17       	cp	r26, r30
 866:	c1 f5       	brne	.+112    	; 0x8d8 <State2+0x1cc>
 868:	9c 17       	cp	r25, r28
 86a:	c0 f0       	brcs	.+48     	; 0x89c <State2+0x190>
 86c:	c9 17       	cp	r28, r25
 86e:	a1 f5       	brne	.+104    	; 0x8d8 <State2+0x1cc>
 870:	5d 17       	cp	r21, r29
 872:	a0 f0       	brcs	.+40     	; 0x89c <State2+0x190>
 874:	d5 17       	cp	r29, r21
 876:	81 f5       	brne	.+96     	; 0x8d8 <State2+0x1cc>
 878:	61 17       	cp	r22, r17
 87a:	80 f0       	brcs	.+32     	; 0x89c <State2+0x190>
 87c:	16 17       	cp	r17, r22
 87e:	61 f5       	brne	.+88     	; 0x8d8 <State2+0x1cc>
 880:	70 17       	cp	r23, r16
 882:	60 f0       	brcs	.+24     	; 0x89c <State2+0x190>
 884:	07 17       	cp	r16, r23
 886:	41 f5       	brne	.+80     	; 0x8d8 <State2+0x1cc>
 888:	ff 15       	cp	r31, r15
 88a:	40 f0       	brcs	.+16     	; 0x89c <State2+0x190>
 88c:	ff 16       	cp	r15, r31
 88e:	21 f5       	brne	.+72     	; 0x8d8 <State2+0x1cc>
 890:	8e 15       	cp	r24, r14
 892:	20 f0       	brcs	.+8      	; 0x89c <State2+0x190>
 894:	e8 16       	cp	r14, r24
 896:	01 f5       	brne	.+64     	; 0x8d8 <State2+0x1cc>
 898:	bd 15       	cp	r27, r13
 89a:	f0 f4       	brcc	.+60     	; 0x8d8 <State2+0x1cc>
		{
			MotorStartTime=Time;
 89c:	d0 92 80 00 	sts	0x0080, r13
 8a0:	e0 92 81 00 	sts	0x0081, r14
 8a4:	f0 92 82 00 	sts	0x0082, r15
 8a8:	00 93 83 00 	sts	0x0083, r16
 8ac:	10 93 84 00 	sts	0x0084, r17
 8b0:	d0 93 85 00 	sts	0x0085, r29
 8b4:	c0 93 86 00 	sts	0x0086, r28
 8b8:	a0 93 87 00 	sts	0x0087, r26
			StartMotor(Close);
 8bc:	80 e0       	ldi	r24, 0x00	; 0
 8be:	0a de       	rcall	.-1004   	; 0x4d4 <StartMotor>
			State=3;
 8c0:	83 e0       	ldi	r24, 0x03	; 3
 8c2:	80 93 6b 00 	sts	0x006B, r24
 8c6:	8f e3       	ldi	r24, 0x3F	; 63
 8c8:	92 e4       	ldi	r25, 0x42	; 66
 8ca:	af e0       	ldi	r26, 0x0F	; 15
 8cc:	81 50       	subi	r24, 0x01	; 1
 8ce:	90 40       	sbci	r25, 0x00	; 0
 8d0:	a0 40       	sbci	r26, 0x00	; 0
 8d2:	e1 f7       	brne	.-8      	; 0x8cc <State2+0x1c0>
 8d4:	00 c0       	rjmp	.+0      	; 0x8d6 <State2+0x1ca>
 8d6:	00 00       	nop
			_delay_ms(500);
		}
	}	
}
 8d8:	df 91       	pop	r29
 8da:	cf 91       	pop	r28
 8dc:	1f 91       	pop	r17
 8de:	0f 91       	pop	r16
 8e0:	ff 90       	pop	r15
 8e2:	ef 90       	pop	r14
 8e4:	df 90       	pop	r13
 8e6:	08 95       	ret

000008e8 <State3>:



void State3(void) //closing
{
	if((RemoteAFlag)||(!OpenKey)||(!StopKey))
 8e8:	80 91 6d 00 	lds	r24, 0x006D
 8ec:	88 23       	and	r24, r24
 8ee:	21 f4       	brne	.+8      	; 0x8f8 <State3+0x10>
 8f0:	99 9b       	sbis	0x13, 1	; 19
 8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <State3+0x10>
 8f4:	9a 99       	sbic	0x13, 2	; 19
 8f6:	2f c0       	rjmp	.+94     	; 0x956 <State3+0x6e>
	{
		RemoteAFlag=0;
 8f8:	10 92 6d 00 	sts	0x006D, r1
		MotorStopTime=Time;
 8fc:	80 91 61 00 	lds	r24, 0x0061
 900:	80 93 78 00 	sts	0x0078, r24
 904:	80 91 62 00 	lds	r24, 0x0062
 908:	80 93 79 00 	sts	0x0079, r24
 90c:	80 91 63 00 	lds	r24, 0x0063
 910:	80 93 7a 00 	sts	0x007A, r24
 914:	80 91 64 00 	lds	r24, 0x0064
 918:	80 93 7b 00 	sts	0x007B, r24
 91c:	80 91 65 00 	lds	r24, 0x0065
 920:	80 93 7c 00 	sts	0x007C, r24
 924:	80 91 66 00 	lds	r24, 0x0066
 928:	80 93 7d 00 	sts	0x007D, r24
 92c:	80 91 67 00 	lds	r24, 0x0067
 930:	80 93 7e 00 	sts	0x007E, r24
 934:	80 91 68 00 	lds	r24, 0x0068
 938:	80 93 7f 00 	sts	0x007F, r24
		StopMotor();
 93c:	c6 dd       	rcall	.-1140   	; 0x4ca <StopMotor>
		State=2;
 93e:	82 e0       	ldi	r24, 0x02	; 2
 940:	80 93 6b 00 	sts	0x006B, r24
 944:	8f e3       	ldi	r24, 0x3F	; 63
 946:	92 e4       	ldi	r25, 0x42	; 66
 948:	af e0       	ldi	r26, 0x0F	; 15
 94a:	81 50       	subi	r24, 0x01	; 1
 94c:	90 40       	sbci	r25, 0x00	; 0
 94e:	a0 40       	sbci	r26, 0x00	; 0
 950:	e1 f7       	brne	.-8      	; 0x94a <State3+0x62>
 952:	00 c0       	rjmp	.+0      	; 0x954 <State3+0x6c>
 954:	00 00       	nop
		_delay_ms(500);
	}
	
	if(IRSensor)
 956:	86 9b       	sbis	0x10, 6	; 16
 958:	38 c0       	rjmp	.+112    	; 0x9ca <State3+0xe2>
	{
		StopMotor();
 95a:	b7 dd       	rcall	.-1170   	; 0x4ca <StopMotor>
 95c:	8f e3       	ldi	r24, 0x3F	; 63
 95e:	92 e4       	ldi	r25, 0x42	; 66
 960:	af e0       	ldi	r26, 0x0F	; 15
 962:	81 50       	subi	r24, 0x01	; 1
 964:	90 40       	sbci	r25, 0x00	; 0
 966:	a0 40       	sbci	r26, 0x00	; 0
 968:	e1 f7       	brne	.-8      	; 0x962 <State3+0x7a>
 96a:	00 c0       	rjmp	.+0      	; 0x96c <State3+0x84>
 96c:	00 00       	nop
		_delay_ms(500);
		MotorStartTime=Time;
 96e:	80 91 61 00 	lds	r24, 0x0061
 972:	80 93 80 00 	sts	0x0080, r24
 976:	80 91 62 00 	lds	r24, 0x0062
 97a:	80 93 81 00 	sts	0x0081, r24
 97e:	80 91 63 00 	lds	r24, 0x0063
 982:	80 93 82 00 	sts	0x0082, r24
 986:	80 91 64 00 	lds	r24, 0x0064
 98a:	80 93 83 00 	sts	0x0083, r24
 98e:	80 91 65 00 	lds	r24, 0x0065
 992:	80 93 84 00 	sts	0x0084, r24
 996:	80 91 66 00 	lds	r24, 0x0066
 99a:	80 93 85 00 	sts	0x0085, r24
 99e:	80 91 67 00 	lds	r24, 0x0067
 9a2:	80 93 86 00 	sts	0x0086, r24
 9a6:	80 91 68 00 	lds	r24, 0x0068
 9aa:	80 93 87 00 	sts	0x0087, r24
		StartMotor(Open);
 9ae:	81 e0       	ldi	r24, 0x01	; 1
 9b0:	91 dd       	rcall	.-1246   	; 0x4d4 <StartMotor>
 9b2:	8f e3       	ldi	r24, 0x3F	; 63
 9b4:	92 e4       	ldi	r25, 0x42	; 66
 9b6:	af e0       	ldi	r26, 0x0F	; 15
 9b8:	81 50       	subi	r24, 0x01	; 1
 9ba:	90 40       	sbci	r25, 0x00	; 0
 9bc:	a0 40       	sbci	r26, 0x00	; 0
 9be:	e1 f7       	brne	.-8      	; 0x9b8 <State3+0xd0>
 9c0:	00 c0       	rjmp	.+0      	; 0x9c2 <State3+0xda>
 9c2:	00 00       	nop
		_delay_ms(500);
		State=1;
 9c4:	81 e0       	ldi	r24, 0x01	; 1
 9c6:	80 93 6b 00 	sts	0x006B, r24
	}
	
	if(Time>(MotorStartTime+ActionTime))
 9ca:	80 91 80 00 	lds	r24, 0x0080
 9ce:	60 91 81 00 	lds	r22, 0x0081
 9d2:	40 91 82 00 	lds	r20, 0x0082
 9d6:	30 91 83 00 	lds	r19, 0x0083
 9da:	20 91 84 00 	lds	r18, 0x0084
 9de:	f0 91 85 00 	lds	r31, 0x0085
 9e2:	e0 91 86 00 	lds	r30, 0x0086
 9e6:	b0 91 87 00 	lds	r27, 0x0087
 9ea:	a8 2f       	mov	r26, r24
 9ec:	ac 58       	subi	r26, 0x8C	; 140
 9ee:	51 e0       	ldi	r21, 0x01	; 1
 9f0:	a8 17       	cp	r26, r24
 9f2:	08 f0       	brcs	.+2      	; 0x9f6 <State3+0x10e>
 9f4:	50 e0       	ldi	r21, 0x00	; 0
 9f6:	86 2f       	mov	r24, r22
 9f8:	8c 5f       	subi	r24, 0xFC	; 252
 9fa:	91 e0       	ldi	r25, 0x01	; 1
 9fc:	86 17       	cp	r24, r22
 9fe:	08 f0       	brcs	.+2      	; 0xa02 <State3+0x11a>
 a00:	90 e0       	ldi	r25, 0x00	; 0
 a02:	58 0f       	add	r21, r24
 a04:	61 e0       	ldi	r22, 0x01	; 1
 a06:	58 17       	cp	r21, r24
 a08:	08 f0       	brcs	.+2      	; 0xa0c <State3+0x124>
 a0a:	60 e0       	ldi	r22, 0x00	; 0
 a0c:	96 2b       	or	r25, r22
 a0e:	85 2f       	mov	r24, r21
 a10:	74 2f       	mov	r23, r20
 a12:	50 e0       	ldi	r21, 0x00	; 0
 a14:	94 0f       	add	r25, r20
 a16:	41 e0       	ldi	r20, 0x01	; 1
 a18:	97 17       	cp	r25, r23
 a1a:	08 f0       	brcs	.+2      	; 0xa1e <State3+0x136>
 a1c:	40 e0       	ldi	r20, 0x00	; 0
 a1e:	54 2b       	or	r21, r20
 a20:	79 2f       	mov	r23, r25
 a22:	40 e0       	ldi	r20, 0x00	; 0
 a24:	53 0f       	add	r21, r19
 a26:	91 e0       	ldi	r25, 0x01	; 1
 a28:	53 17       	cp	r21, r19
 a2a:	08 f0       	brcs	.+2      	; 0xa2e <State3+0x146>
 a2c:	90 e0       	ldi	r25, 0x00	; 0
 a2e:	49 2b       	or	r20, r25
 a30:	65 2f       	mov	r22, r21
 a32:	52 2f       	mov	r21, r18
 a34:	30 e0       	ldi	r19, 0x00	; 0
 a36:	42 0f       	add	r20, r18
 a38:	21 e0       	ldi	r18, 0x01	; 1
 a3a:	45 17       	cp	r20, r21
 a3c:	08 f0       	brcs	.+2      	; 0xa40 <State3+0x158>
 a3e:	20 e0       	ldi	r18, 0x00	; 0
 a40:	32 2b       	or	r19, r18
 a42:	54 2f       	mov	r21, r20
 a44:	4f 2f       	mov	r20, r31
 a46:	20 e0       	ldi	r18, 0x00	; 0
 a48:	3f 0f       	add	r19, r31
 a4a:	f1 e0       	ldi	r31, 0x01	; 1
 a4c:	34 17       	cp	r19, r20
 a4e:	08 f0       	brcs	.+2      	; 0xa52 <State3+0x16a>
 a50:	f0 e0       	ldi	r31, 0x00	; 0
 a52:	2f 2b       	or	r18, r31
 a54:	43 2f       	mov	r20, r19
 a56:	3e 2f       	mov	r19, r30
 a58:	90 e0       	ldi	r25, 0x00	; 0
 a5a:	2e 0f       	add	r18, r30
 a5c:	e1 e0       	ldi	r30, 0x01	; 1
 a5e:	23 17       	cp	r18, r19
 a60:	08 f0       	brcs	.+2      	; 0xa64 <State3+0x17c>
 a62:	e0 e0       	ldi	r30, 0x00	; 0
 a64:	9e 2b       	or	r25, r30
 a66:	32 2f       	mov	r19, r18
 a68:	9b 0f       	add	r25, r27
 a6a:	20 91 68 00 	lds	r18, 0x0068
 a6e:	92 17       	cp	r25, r18
 a70:	50 f1       	brcs	.+84     	; 0xac6 <State3+0x1de>
 a72:	29 17       	cp	r18, r25
 a74:	e1 f5       	brne	.+120    	; 0xaee <State3+0x206>
 a76:	90 91 67 00 	lds	r25, 0x0067
 a7a:	39 17       	cp	r19, r25
 a7c:	20 f1       	brcs	.+72     	; 0xac6 <State3+0x1de>
 a7e:	93 17       	cp	r25, r19
 a80:	b1 f5       	brne	.+108    	; 0xaee <State3+0x206>
 a82:	90 91 66 00 	lds	r25, 0x0066
 a86:	49 17       	cp	r20, r25
 a88:	f0 f0       	brcs	.+60     	; 0xac6 <State3+0x1de>
 a8a:	94 17       	cp	r25, r20
 a8c:	81 f5       	brne	.+96     	; 0xaee <State3+0x206>
 a8e:	90 91 65 00 	lds	r25, 0x0065
 a92:	59 17       	cp	r21, r25
 a94:	c0 f0       	brcs	.+48     	; 0xac6 <State3+0x1de>
 a96:	95 17       	cp	r25, r21
 a98:	51 f5       	brne	.+84     	; 0xaee <State3+0x206>
 a9a:	90 91 64 00 	lds	r25, 0x0064
 a9e:	69 17       	cp	r22, r25
 aa0:	90 f0       	brcs	.+36     	; 0xac6 <State3+0x1de>
 aa2:	96 17       	cp	r25, r22
 aa4:	21 f5       	brne	.+72     	; 0xaee <State3+0x206>
 aa6:	90 91 63 00 	lds	r25, 0x0063
 aaa:	79 17       	cp	r23, r25
 aac:	60 f0       	brcs	.+24     	; 0xac6 <State3+0x1de>
 aae:	97 17       	cp	r25, r23
 ab0:	f1 f4       	brne	.+60     	; 0xaee <State3+0x206>
 ab2:	90 91 62 00 	lds	r25, 0x0062
 ab6:	89 17       	cp	r24, r25
 ab8:	30 f0       	brcs	.+12     	; 0xac6 <State3+0x1de>
 aba:	98 17       	cp	r25, r24
 abc:	c1 f4       	brne	.+48     	; 0xaee <State3+0x206>
 abe:	80 91 61 00 	lds	r24, 0x0061
 ac2:	a8 17       	cp	r26, r24
 ac4:	a0 f4       	brcc	.+40     	; 0xaee <State3+0x206>
	{
		LEDReset;
 ac6:	94 9a       	sbi	0x12, 4	; 18
		MotorStopTime=0;
 ac8:	10 92 78 00 	sts	0x0078, r1
 acc:	10 92 79 00 	sts	0x0079, r1
 ad0:	10 92 7a 00 	sts	0x007A, r1
 ad4:	10 92 7b 00 	sts	0x007B, r1
 ad8:	10 92 7c 00 	sts	0x007C, r1
 adc:	10 92 7d 00 	sts	0x007D, r1
 ae0:	10 92 7e 00 	sts	0x007E, r1
 ae4:	10 92 7f 00 	sts	0x007F, r1
		StopMotor();
 ae8:	f0 dc       	rcall	.-1568   	; 0x4ca <StopMotor>
		State=0;
 aea:	10 92 6b 00 	sts	0x006B, r1
 aee:	08 95       	ret

00000af0 <StateManager>:



void StateManager(void)
{
  if(State==0)
 af0:	80 91 6b 00 	lds	r24, 0x006B
 af4:	88 23       	and	r24, r24
 af6:	09 f4       	brne	.+2      	; 0xafa <StateManager+0xa>
    State0();
 af8:	fa dc       	rcall	.-1548   	; 0x4ee <State0>
  
  if(State==1)
 afa:	80 91 6b 00 	lds	r24, 0x006B
 afe:	81 30       	cpi	r24, 0x01	; 1
 b00:	09 f4       	brne	.+2      	; 0xb04 <StateManager+0x14>
	State1();
 b02:	2d dd       	rcall	.-1446   	; 0x55e <State1>
  
  if(State==2)
 b04:	80 91 6b 00 	lds	r24, 0x006B
 b08:	82 30       	cpi	r24, 0x02	; 2
 b0a:	09 f4       	brne	.+2      	; 0xb0e <StateManager+0x1e>
	State2();
 b0c:	ff dd       	rcall	.-1026   	; 0x70c <State2>
  
  if(State==3)
 b0e:	80 91 6b 00 	lds	r24, 0x006B
 b12:	83 30       	cpi	r24, 0x03	; 3
 b14:	09 f4       	brne	.+2      	; 0xb18 <StateManager+0x28>
	State3();	 	
 b16:	e8 de       	rcall	.-560    	; 0x8e8 <State3>
 b18:	08 95       	ret

00000b1a <Flasher>:



void Flasher(void)
{
	if(FlasherFlag)
 b1a:	80 91 6a 00 	lds	r24, 0x006A
 b1e:	88 23       	and	r24, r24
 b20:	41 f0       	breq	.+16     	; 0xb32 <Flasher+0x18>
	{
			if(FlasherState==0)
 b22:	80 91 69 00 	lds	r24, 0x0069
 b26:	88 23       	and	r24, r24
 b28:	11 f4       	brne	.+4      	; 0xb2e <Flasher+0x14>
				{Relay3Reset;}		
 b2a:	97 98       	cbi	0x12, 7	; 18
 b2c:	08 95       	ret
			else
				{Relay3Set;}
 b2e:	97 9a       	sbi	0x12, 7	; 18
 b30:	08 95       	ret
	}
	else
	{
		Relay3Reset;FlasherState=0;
 b32:	97 98       	cbi	0x12, 7	; 18
 b34:	10 92 69 00 	sts	0x0069, r1
 b38:	08 95       	ret

00000b3a <main>:
int main(void)
{
	
	static char state=0;
    
	Startup();
 b3a:	b2 dc       	rcall	.-1692   	; 0x4a0 <Startup>
	LEDReset;
 b3c:	94 9a       	sbi	0x12, 4	; 18
	
	
	
	while(1)
    {
		Flasher(); 
 b3e:	ed df       	rcall	.-38     	; 0xb1a <Flasher>
		StateManager();		
 b40:	d7 df       	rcall	.-82     	; 0xaf0 <StateManager>
 b42:	fd cf       	rjmp	.-6      	; 0xb3e <main+0x4>

00000b44 <_exit>:
 b44:	f8 94       	cli

00000b46 <__stop_program>:
 b46:	ff cf       	rjmp	.-2      	; 0xb46 <__stop_program>
